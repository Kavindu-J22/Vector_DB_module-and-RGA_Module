"""
Simple script to upload test data to Pinecone without complex dependencies
"""

from pinecone import Pinecone
import json
import time
import config

def upload_simple_test_data():
    """Upload simple test data to Pinecone"""
    print("🚀 Uploading test data to Pinecone...")
    
    try:
        # Initialize Pinecone
        pc = Pinecone(api_key=config.PINECONE_API_KEY)
        index = pc.Index(config.PINECONE_INDEX_NAME)
        
        # Create simple test vectors (384 dimensions with small values)
        test_vectors = []
        
        # Load some sample text from the JSON files
        with open('acts_2024.json', 'r', encoding='utf-8') as f:
            acts_data = json.load(f)
        
        with open('cases_2024.json', 'r', encoding='utf-8') as f:
            cases_data = json.load(f)
        
        # Create test vectors for first 5 acts and 5 cases
        sample_docs = acts_data[:5] + cases_data[:5]
        
        for i, doc in enumerate(sample_docs):
            # Create a simple embedding (just for testing)
            # In production, this would be generated by the embedding model
            embedding = [0.1 + (i * 0.01)] * 384  # Simple pattern
            
            # Determine document type
            doc_type = 'act' if i < 5 else 'case'
            
            # Create metadata
            metadata = {
                'document_type': doc_type,
                'original_id': doc.get('id', f'test-{i}'),
                'filename': doc.get('filename', f'Test Document {i}')[:100],  # Limit length
                'primary_language': doc.get('primaryLang', 'English'),
                'chunk_index': 0,
                'sequence_number': 1,
                'word_count': doc.get('wordCount', 0),
                'text_preview': doc.get('text', '')[:200]  # First 200 chars
            }
            
            # Create vector
            vector = {
                'id': f'test-doc-{i:03d}',
                'values': embedding,
                'metadata': metadata
            }
            
            test_vectors.append(vector)
        
        print(f"📋 Prepared {len(test_vectors)} test vectors")
        
        # Upload in batches
        batch_size = 5
        for i in range(0, len(test_vectors), batch_size):
            batch = test_vectors[i:i + batch_size]
            print(f"📤 Uploading batch {i//batch_size + 1}...")
            
            index.upsert(vectors=batch)
            time.sleep(1)  # Small delay between batches
        
        print("✅ Test data uploaded successfully!")
        
        # Wait for indexing
        print("⏳ Waiting for indexing to complete...")
        time.sleep(10)
        
        # Check final stats
        stats = index.describe_index_stats()
        print(f"📊 Final index statistics:")
        print(f"   Total vectors: {stats.get('total_vector_count', 0)}")
        print(f"   Dimension: {stats.get('dimension', 0)}")
        print(f"   Index fullness: {stats.get('index_fullness', 0)}")
        
        # Test a simple query
        print("\n🔍 Testing search functionality...")
        query_vector = [0.1] * 384  # Simple query vector
        
        results = index.query(
            vector=query_vector,
            top_k=3,
            include_metadata=True
        )
        
        print(f"📋 Search returned {len(results.get('matches', []))} results:")
        for i, match in enumerate(results.get('matches', [])):
            print(f"   {i+1}. ID: {match['id']}")
            print(f"      Score: {match['score']:.4f}")
            print(f"      Type: {match['metadata'].get('document_type', 'unknown')}")
            print(f"      File: {match['metadata'].get('filename', 'unknown')[:50]}...")
        
        return True
        
    except Exception as e:
        print(f"❌ Error uploading test data: {e}")
        return False

def check_index_status():
    """Check current index status"""
    try:
        pc = Pinecone(api_key=config.PINECONE_API_KEY)
        index = pc.Index(config.PINECONE_INDEX_NAME)
        
        stats = index.describe_index_stats()
        print(f"📊 Current index status:")
        print(f"   Index name: {config.PINECONE_INDEX_NAME}")
        print(f"   Total vectors: {stats.get('total_vector_count', 0)}")
        print(f"   Dimension: {stats.get('dimension', 0)}")
        print(f"   Index fullness: {stats.get('index_fullness', 0)}")
        
        return stats.get('total_vector_count', 0) > 0
        
    except Exception as e:
        print(f"❌ Error checking index: {e}")
        return False

def main():
    """Main function"""
    print("=" * 60)
    print("📤 PINECONE TEST DATA UPLOADER")
    print("=" * 60)
    
    # Check current status
    print("🔍 Checking current index status...")
    has_data = check_index_status()
    
    if has_data:
        print("✅ Index already contains data!")
        print("🎯 You should see this data in your Pinecone dashboard")
    else:
        print("⚠️ Index is empty. Uploading test data...")
        
        if upload_simple_test_data():
            print("\n🎉 SUCCESS!")
            print("✅ Test data has been uploaded to Pinecone")
            print("🎯 You should now see data in your Pinecone dashboard")
            print("\n💡 Dashboard tips:")
            print("   1. Go to https://app.pinecone.io/")
            print("   2. Look for index:", config.PINECONE_INDEX_NAME)
            print("   3. Click on the index to see details")
            print("   4. Check the 'Vectors' tab to see uploaded data")
            print("   5. Data may take a few minutes to appear")
        else:
            print("\n❌ Failed to upload test data")
            print("Please check your Pinecone configuration and try again")

if __name__ == "__main__":
    main()
